/*******************************************************************************
* File LRU.h
*
* Goal: Least Recently Used cache replacement policy
*
* Created: December 10th, 2016  - Anthony Kougkas
 * Updated:
* Illinois Institute of Technology - SCS Lab
* (C) 2016
******************************************************************************/
#ifndef IRIS_LRU_H
#define IRIS_LRU_H
/******************************************************************************
*include files
******************************************************************************/
#include "AbstractReplacementPolicy.h"
/******************************************************************************
*typedefs
******************************************************************************/
typedef std::list<std::string> LI;
typedef std::pair<void *, LI::iterator> PII;
typedef std::unordered_map<std::string, PII> HIPII;
/******************************************************************************
*Class
******************************************************************************/
class LRU: public AbstractReplacementPolicy {
public:
/******************************************************************************
*Interface
******************************************************************************/
  int addToCache(std::shared_ptr<Key> &key) override;
  virtual int isCached(std::shared_ptr<Key> &key) override;
/******************************************************************************
*Constructor
******************************************************************************/
  LRU():AbstractReplacementPolicy(){
    cacheMap=HIPII();
    usedList=LI();
  }
protected:
/******************************************************************************
*Variables and members
******************************************************************************/
  LI usedList;
  HIPII cacheMap;
/******************************************************************************
*Functions
******************************************************************************/
  void refresh(HIPII::iterator cacheLine);
/******************************************************************************
*Destructor
******************************************************************************/
public:
  virtual ~LRU(){}
};


#endif //IRIS_LRU_H
